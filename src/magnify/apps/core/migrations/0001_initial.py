# Generated by Django 4.1.4 on 2023-01-04 12:54

import uuid

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import timezone_field.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        max_length=30,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[a-z0-9_-]*$",
                                message="Username must contain only lower case letters, numbers, underscores and hyphens.",
                            )
                        ],
                        verbose_name="username",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                ("email", models.EmailField(max_length=255, unique=True)),
                (
                    "language",
                    models.CharField(
                        choices=[("en", "English"), ("fr", "French")],
                        default="en",
                        help_text="The language in which the user wants to see the interface.",
                        max_length=10,
                        verbose_name="language",
                    ),
                ),
                (
                    "timezone",
                    timezone_field.fields.TimeZoneField(
                        choices_display="WITH_GMT_OFFSET", default="UTC", use_pytz=False
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "db_table": "magnify_user",
                "ordering": ("username",),
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("token", models.CharField(max_length=100)),
                (
                    "administrators",
                    models.ManyToManyField(
                        blank=True,
                        related_name="is_administrator_of",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Group",
                "verbose_name_plural": "Groups",
                "db_table": "magnify_group",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="Label",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "color",
                    models.CharField(
                        max_length=7,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="nomatch",
                                message="Color must be a valid hexa code",
                                regex="^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$",
                            )
                        ],
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Label",
                "verbose_name_plural": "Labels",
                "db_table": "magnify_label",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="Meeting",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                ("name", models.CharField(max_length=500)),
                ("is_public", models.BooleanField(default=True)),
                ("start", models.DateTimeField()),
                ("end", models.DateTimeField()),
                (
                    "timezone",
                    timezone_field.fields.TimeZoneField(
                        choices_display="WITH_GMT_OFFSET", use_pytz=False
                    ),
                ),
                (
                    "recurrence",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("yearly", "Yearly"),
                        ],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("frequency", models.PositiveIntegerField(default=1)),
                ("recurring_until", models.DateTimeField(blank=True, null=True)),
                ("nb_occurrences", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "weekdays",
                    models.CharField(
                        blank=True,
                        max_length=7,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[0-6]{0,7}$",
                                message="Weekdays must contain the numbers of the active days.",
                            )
                        ],
                    ),
                ),
                (
                    "monthly_type",
                    models.CharField(
                        choices=[
                            ("date_day", "Every month on this date"),
                            ("nth_day", "Every month on the nth week day of the month"),
                        ],
                        default="date_day",
                        max_length=10,
                    ),
                ),
            ],
            options={
                "verbose_name": "Meeting",
                "verbose_name_plural": "Meetings",
                "db_table": "magnify_meeting",
                "ordering": ("-start", "name"),
            },
        ),
        migrations.CreateModel(
            name="Resource",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                ("is_public", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Resource",
                "verbose_name_plural": "Resources",
                "db_table": "magnify_resource",
            },
        ),
        migrations.CreateModel(
            name="Room",
            fields=[
                ("name", models.CharField(max_length=500)),
                (
                    "resource",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.resource",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True, max_length=100, null=True, unique=True
                    ),
                ),
                (
                    "configuration",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Values for Jitsi parameters to configure the room via the iframe API.",
                        verbose_name="Jitsi room configuration",
                    ),
                ),
            ],
            options={
                "verbose_name": "Room",
                "verbose_name_plural": "Rooms",
                "db_table": "magnify_room",
                "ordering": ("name",),
            },
            bases=("core.resource",),
        ),
        migrations.CreateModel(
            name="ResourceAccess",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("member", "Member"),
                            ("administrator", "Administrator"),
                            ("owner", "Owner"),
                        ],
                        default="member",
                        max_length=20,
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="accesses",
                        to="core.group",
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="accesses",
                        to="core.resource",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="accesses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Resource access",
                "verbose_name_plural": "Resource accesses",
                "db_table": "magnify_resource_access",
            },
        ),
        migrations.AddField(
            model_name="resource",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                related_name="resources",
                through="core.ResourceAccess",
                to="core.group",
            ),
        ),
        migrations.AddField(
            model_name="resource",
            name="labels",
            field=models.ManyToManyField(
                blank=True, related_name="is_resource_label_of", to="core.label"
            ),
        ),
        migrations.AddField(
            model_name="resource",
            name="users",
            field=models.ManyToManyField(
                related_name="resources",
                through="core.ResourceAccess",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="MeetingAccess",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="meeting_relations",
                        to="core.group",
                    ),
                ),
                (
                    "meeting",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="accesses",
                        to="core.meeting",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="meeting_relations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Meeting/guest relation",
                "verbose_name_plural": "Meeting/guest relations",
                "db_table": "magnify_meeting_access",
            },
        ),
        migrations.AddField(
            model_name="meeting",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                related_name="meetings",
                through="core.MeetingAccess",
                to="core.group",
            ),
        ),
        migrations.AddField(
            model_name="meeting",
            name="owner",
            field=models.ForeignKey(
                help_text="User who created the meeting.",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="owner_of_meetings",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="meeting",
            name="users",
            field=models.ManyToManyField(
                related_name="meetings",
                through="core.MeetingAccess",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="group",
            name="labels",
            field=models.ManyToManyField(
                blank=True, related_name="is_group_label_of", to="core.label"
            ),
        ),
        migrations.AddField(
            model_name="group",
            name="members",
            field=models.ManyToManyField(
                blank=True, related_name="is_member_of", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddConstraint(
            model_name="resourceaccess",
            constraint=models.UniqueConstraint(
                condition=models.Q(("group__isnull", True)),
                fields=("user", "resource"),
                name="resource_access_unique_user_resource",
                violation_error_message="Resource access with this user and resource already exists.",
            ),
        ),
        migrations.AddConstraint(
            model_name="resourceaccess",
            constraint=models.UniqueConstraint(
                condition=models.Q(("user__isnull", True)),
                fields=("group", "resource"),
                name="resources_access_unique_group_resource",
                violation_error_message="Resource access with this group and resource already exists.",
            ),
        ),
        migrations.AddConstraint(
            model_name="resourceaccess",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("group__isnull", True), ("user__isnull", True), _negated=True
                ),
                name="resource_access_not_user_and_group_both_null",
            ),
        ),
        migrations.AddConstraint(
            model_name="resourceaccess",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("group__isnull", False), ("user__isnull", False), _negated=True
                ),
                name="resource_access_not_user_and_group_both_set",
            ),
        ),
        migrations.AddConstraint(
            model_name="resourceaccess",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("group__isnull", True),
                    models.Q(("role", "owner"), _negated=True),
                    _connector="OR",
                ),
                name="resource_access_group_is_not_owner",
                violation_error_message="The 'owner' role can not be assigned to a group.",
            ),
        ),
        migrations.AddConstraint(
            model_name="meetingaccess",
            constraint=models.UniqueConstraint(
                condition=models.Q(("group__isnull", True)),
                fields=("user", "meeting"),
                name="unique_user_meeting",
                violation_error_message="This user is already declared as a guest for this meeting.",
            ),
        ),
        migrations.AddConstraint(
            model_name="meetingaccess",
            constraint=models.UniqueConstraint(
                condition=models.Q(("user__isnull", True)),
                fields=("group", "meeting"),
                name="unique_group_meeting",
                violation_error_message="This group is already declared as a guest for this meeting.",
            ),
        ),
        migrations.AddConstraint(
            model_name="meetingaccess",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("group__isnull", True), ("user__isnull", True), _negated=True
                ),
                name="meeting_guest_not_user_and_group_both_null",
            ),
        ),
        migrations.AddConstraint(
            model_name="meetingaccess",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("group__isnull", False), ("user__isnull", False), _negated=True
                ),
                name="meeting_guest_not_user_and_group_both_set",
            ),
        ),
        migrations.AddField(
            model_name="meeting",
            name="room",
            field=models.ForeignKey(
                blank=True,
                help_text="Room that hosts this meeting.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="meetings",
                to="core.room",
            ),
        ),
        migrations.AddConstraint(
            model_name="meeting",
            constraint=models.CheckConstraint(
                check=models.Q(("end__gte", models.F("start"))),
                name="end_greater_than_start",
                violation_error_message="The start date must be earlier than the end date.",
            ),
        ),
        migrations.AddConstraint(
            model_name="meeting",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("recurring_until__gte", models.F("start")),
                    ("recurring_until__isnull", True),
                    _connector="OR",
                ),
                name="recurring_until_greater_than_start",
                violation_error_message="The start date must be earlier than the date of end of recurrence.",
            ),
        ),
        migrations.AddConstraint(
            model_name="meeting",
            constraint=models.CheckConstraint(
                check=models.Q(("frequency__gte", 1)), name="frequency_gte_1"
            ),
        ),
        migrations.AddConstraint(
            model_name="meeting",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("nb_occurrences__isnull", True),
                        ("recurring_until__isnull", True),
                    ),
                    models.Q(
                        ("nb_occurrences__isnull", False),
                        ("recurring_until__isnull", False),
                    ),
                    _connector="OR",
                ),
                name="recurring_until_and_nb_occurrences_mutually_null_or_not",
            ),
        ),
    ]
