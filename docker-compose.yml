version: '3.8'

services:
  postgresql:
    image: postgres:12
    env_file:
      - env.d/development/postgresql

  app-dev:
    build:
      context: .
      target: development
      args:
        DOCKER_USER: ${DOCKER_USER:-1000}
    user: ${DOCKER_USER:-1000}
    image: jitsi-magnify:development
    environment:
      - PYLINTHOME=/app/.pylint.d
      - DJANGO_CONFIGURATION=Development
    env_file:
      - env.d/development/common
      - env.d/development/postgresql
    ports:
      - "8071:8000"
    volumes:
      - ./src/demo/backend:/app
      - ./src/magnify:/usr/local/jitsi-magnify/magnify
      - ./data/media:/data/media
    depends_on:
      - postgresql

  app:
    build:
      context: .
      target: production
      args:
        DOCKER_USER: ${DOCKER_USER:-1000}
    user: ${DOCKER_USER:-1000}
    image: jitsi-magnify:production
    environment:
      - DJANGO_CONFIGURATION=ContinuousIntegration
    env_file:
      - env.d/development/common
      - env.d/development/postgresql
    volumes:
      - ./data/media:/data/media
    depends_on:
      - postgresql

  nginx:
    image: nginx:1.13
    ports:
      - "8082:8082"
    volumes:
      - ./docker/files/etc/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./data/media:/data/media:ro
    depends_on:
      - app

  dockerize:
    image: jwilder/dockerize

  crowdin:
    image: crowdin/cli:3.5.2
    volumes:
      - ".:/app"
    env_file:
      - env.d/development/crowdin
    user: "${DOCKER_USER:-1000}"
    working_dir: /app

  ngrok:
    image: wernight/ngrok
    command: ngrok http app-dev:8000
    ports:
      - 4040:4040

  terraform-state:
    image: hashicorp/terraform:1.0.7
    environment:
      - TF_WORKSPACE=${PROJECT:-} # avoid env conflict in local state
    user: ${DOCKER_USER:-1000}
    working_dir: /app
    volumes:
      - ./src/terraform/create_state_bucket:/app

  terraform:
    image: hashicorp/terraform:1.0.7
    user: ${DOCKER_USER:-1000}
    working_dir: /app
    volumes:
      - ./src/terraform:/app
